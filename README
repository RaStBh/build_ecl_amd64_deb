How to build a Debian GNU/Linux  / Ubuntu GNU/Linux binary package of Embeddable
Common-Lisp (ECL) from its source code for my local development.

Copyright 2021 Ralf Stephan (RaSt) <me@ralf-stephan.name>

Copying  and  distribution of  this  file,  with  or without  modification,  are
permitted in any  medium without royalty provided the copyright  notice and this
notice are preserved.  This file is offered as-is, without any warranty.

================================================================================

Note
----

This is not suited for the novice user.



How I build the deb package
---------------------------



1 update and upgrade your system

bash$ apt-get update

bash$ apt-get upgrade



2 create build ecl directory

bash> cd /home/vagrant/

bash> mkdir ./build_ecl_amd64_deb/

bash> cd ./build_ecl/



3 download ecl source files from ubuntu

bash> cd /home/vagrant/build_ecl_amd64_deb/

bash> apt-get --download-only source ecl

bash> mv ./ecl_16.1.3+ds-4.debian.tar.xz /home/vagrant/source/

bash> mv ./ecl_16.1.3+ds-4.dsc /home/vagrant/source/

bash> mv ./ecl_16.1.3+ds.orig.tar.xz /home/vagrant/source/



4 get unix timestamp

I use the unix timestamp as a version number.

bash> declare TS=$(date +%s)

bash> echo ${TS}

Here in this README I use 1619418966.



5 clone ECL repository from Debian GNU/Linux

bash> cd /home/vagrant/build_ecl_amd64_deb/

bash> git clone https://salsa.debian.org/common-lisp-team/ecl.git ./ecl_salsa.debian.org_common-lisp-team_1619418966/

bash> tar -cJf ./ecl_salsa.debian.org_common-lisp-team_1619418966.tar.xz ./ecl_salsa.debian.org_common-lisp-team_1619418966

bash> mv ./ecl_salsa.debian.org_common-lisp-team_1619418966.tar.xz /home/vagrant/source/



6 clone ECL repository from Embeddable Common-Lisp

bash> cd /home/vagrant/build_ecl_amd64_deb/

bash> git clone https://gitlab.com/embeddable-common-lisp/ecl/ ./ecl_gitlab.com_embeddable-common-lisp_1619418966/

bash> tar -cJf ./ecl_gitlab.com_embeddable-common-lisp_1619418966.tar.xz ./ecl_gitlab.com_embeddable-common-lisp_1619418966

bash> mv ./ecl_gitlab.com_embeddable-common-lisp_1619418966.tar.xz /home/vagrant/source/



7 install required Ubuntu GNU/Linux packages

* see './ecl_salsa.debian.org_common-lisp-team_1619418966/debian/control' for
  required packages

  Build-Depends:

      debhelper-compat (= 12),
      libgmp-dev,
      file,
      texinfo,
      libncurses5-dev,
      fakeroot,
      libgc-dev (>= 1:7.1),
      chrpath,
      install-info,
      libatomic-ops-dev,
      libffi-dev

  Depends:

      ${shlibs:Depends},
      ${misc:Depends},
      libffi-dev,
      libgmp-dev,
      libncurses5-dev,
      libgc-dev,
      libatomic-ops-dev,
      gcc

* quilt (to manage patches)

* devscripts (contains debuild)

* debmake



8 checkout branch

bash> cd /home/vagrant/build_ecl_amd64_deb/

bash> cd ./ecl_salsa.debian.org_common-lisp-team_1619418966/

bash> git checkout debian/20.4.24+ds-2

    Note: switching to 'debian/20.4.24+ds-2'.

    You are in 'detached HEAD' state. You can look around, make experimental
    changes and commit them, and you can discard any commits you make in this
    state without impacting any branches by switching back to a branch.

    If you want to create a new branch to retain commits you create, you may
    do so (now or later) by using -c with the switch command. Example:

      git switch -c <new-branch-name>

    Or undo this operation with:

      git switch -

    Turn off this advice by setting config variable advice.detachedHead to false

    HEAD is now at 36e6ac23 Add prevent-floating-point-exception.patch and
    release 20.4.24+ds-2 to Debian unstable.



9 checkout branch

bash> cd /home/vagrant/build_ecl_amd64_deb/

bash> cd ./ecl_gitlab.com_embeddable-common-lisp_1619418966/

bash> git checkout 21.2.1

    Note: switching to '21.2.1'.

    You are in 'detached HEAD' state. You can look around, make experimental
    changes and commit them, and you can discard any commits you make in this
    state without impacting any branches by switching back to a branch.

    If you want to create a new branch to retain commits you create, you may
    do so (now or later) by using -c with the switch command. Example:

      git switch -c <new-branch-name>

    Or undo this operation with:

      git switch -

    Turn off this advice by setting config variable advice.detachedHead to false

    HEAD is now at c64679914 Merge branch 'develop'



from: 'dh_make -  prepare Debian  packaging  for an  original  source  archive'.
      Debian Project.  2018-06-08.  --- bash> man dh_make
--------------------------------------------------------------------------------

dh_make is a  tool to convert a  regular source code package  into one formatted
according to  the requirements of  the Debian  Policy.  dh_make must  be invoked
within  a   directory  containing   the  source  code,   which  must   be  named
<packagename>-<version>.   The   <packagename>  must   be  all   lowercase,  The
<packagename>  and <version>  must be  all  lowercase, digits  and dashes.   The
<version>  can also  contain  digits, and  the symbols  plus,  dot, tilde.   The
<version> must start  with a digit.  If  the directory name does  not conform to
this scheme, you must rename it before using dh_make.  Alternatively, you may be
able to use the --packagename option to force the package name.



from: Debian   Reference   (2.77).    Osamu   Aoki.    2021-01-10.    ---   URL:
      https://www.debian .org/doc/manuals/debian-reference/ch02.en.html (online:
      2021-06-15 09:29:59 +0000)
--------------------------------------------------------------------------------

2.5.8. Debian package file names

Debian package files have particular name structures.

Table 2.15. The name structure of Debian packages

+----------------------------------------------------+----------------------------------------------------------------------+
|package type                                        |name structure                                                        |
+----------------------------------------------------+----------------------------------------------------------------------+
|The binary package (a.k.a deb)                      |<package-name>_<upstream-version>-<debian-version>_<architecture>.deb |
+----------------------------------------------------+----------------------------------------------------------------------+
|The binary package for debian-installer (a.k.a udeb)|<package-name>_<upstream-version>-<debian-version>_<architecture>.udeb|
+----------------------------------------------------+----------------------------------------------------------------------+
|The source package (upstream source)                |<package-name>_<upstream-version>-<debian-version>.orig.tar.gz        |
+----------------------------------------------------+----------------------------------------------------------------------+
|The 1.0 source package (Debian changes)             |<package-name>_<upstream-version>-<debian-version>.diff.gz            |
+----------------------------------------------------+----------------------------------------------------------------------+
|The 3.0 (quilt) source package (Debian changes)     |<package-name>_<upstream-version>-<debian-version>.debian.tar.gz      |
+----------------------------------------------------+----------------------------------------------------------------------+
|The source package (description)                    |<package-name>_<upstream-version>-<debian-version>.dsc                |
+----------------------------------------------------+----------------------------------------------------------------------+

[Tip] Tip

Here  only  the  basic  source  package formats  are  described.   See  more  on
dpkg-source(1).

Table 2.16. The usable characters for each component in the Debian package names

+------------------+-------------------------+---------+
|name component    |usable characters (regex)|existence|
+------------------+-------------------------+---------+
|<package-name>    |[a-z,A-Z,0-9,.,+,-]+     |required | ecl
+------------------+-------------------------+---------+
|<epoch>:          |[0-9]+:                  |optional | 0:
+------------------+-------------------------+---------+
|<upstream-version>|[a-z,A-Z,0-9,.,+,-,:]+   |required | 21.2.1
+------------------+-------------------------+---------+
|<debian_version>  |[a-z,A-Z,0-9,.,+,~]+     |optional | 0.1619418966
+------------------+-------------------------+---------+
|<architecture>    |                         |         | x86_64 / amd64
+------------------+-------------------------+---------+

[Note] Note

You can check package version order by dpkg(1), e.g.,

"dpkg --compare-versions 7.0 gt 7.~pre1 ; echo $?" .

[Note] Note

The  debian-installer (d-i)  uses  udeb as  the file  extension  for its  binary
package instead of normal  deb.  An udeb package is a  stripped down deb package
which removes  few non-essential  contents such as  documentation to  save space
while  relaxing the  package policy  requirements.  Both  deb and  udeb packages
share the same package structure.  The "u" stands for micro.



from: Debian Policy Manual (4.5.1.0).   Russ Allbery, Sean Whitton.  2020-11-17.
      --- URL:    https://www.debian.org/doc/debian-policy/ch-controlfields.html
      (online: 2021-06-15 09:40:20 +0000)
--------------------------------------------------------------------------------

5.6.12. Version

The version number of a package.  The format is:

    [epoch:]upstream_version[-debian_revision]

The three components here are:

* epoch

  This is  a single (generally small)  unsigned integer.  It may  be omitted, in
  which case zero is assumed.

  Epochs can help  when the upstream version numbering scheme  changes, but they
  must  be  used  with  care.   You   should  not  change  the  epoch,  even  in
  experimental, without getting consensus on debian-devel first.

* upstream_version

  This is the main part of the version number.  It is usually the version number
  of the original  (“upstream”) package from which the .deb  file has been made,
  if  this is  applicable.  Usually  this will  be in  the same  format as  that
  specified by the upstream author(s); however, it may need to be reformatted to
  fit into the package management system’s format and comparison scheme.

  The comparison behavior  of the package management system with  respect to the
  upstream_version  is described  below.   The upstream_version  portion of  the
  version number is mandatory.

  The upstream_version may contain only alphanumerics 6 and the characters . + -
  ~ (full stop, plus, hyphen, tilde) and should start with a digit.  If there is
  no debian_revision then hyphens are not allowed.

* debian_revision

  This part  of the version number  specifies the version of  the Debian package
  based on  the upstream  version.  It  may contain  only alphanumerics  and the
  characters + . ~  (plus, full stop, tilde) and is compared in  the same way as
  the upstream_version is.

  It is optional; if it isn’t  present then the upstream_version may not contain
  a  hyphen.  This  format represents  the case  where a  piece of  software was
  written specifically to  be a Debian package, where the  Debian package source
  must always  be identical  to the  pristine source  and therefore  no revision
  indication is required.

  It  is  conventional  to  restart  the debian_revision  at  1  each  time  the
  upstream_version is increased.

  The package management system will break  the version number apart at the last
  hyphen in the  string (if there is one) to  determine the upstream_version and
  debian_revision.   The  absence  of  a  debian_revision  is  equivalent  to  a
  debian_revision of 0.

When comparing two  version numbers, first the epoch of  each are compared, then
the  upstream_version   if  epoch   is  equal,   and  then   debian_revision  if
upstream_version   is  also   equal.   epoch   is  compared   numerically.   The
upstream_version  and   debian_revision  parts  are  compared   by  the  package
management system using the following algorithm:

The strings are compared from left to right.

First  the  initial  part  of  each  string  consisting  entirely  of  non-digit
characters  is determined.   These two  parts (one  of which  may be  empty) are
compared  lexically.  If  a difference  is found  it is  returned.  The  lexical
comparison is a comparison of ASCII values modified so that all the letters sort
earlier than all the non-letters and so that a tilde sorts before anything, even
the end of  a part.  For example,  the following parts are in  sorted order from
earliest to latest: ~~, ~~a, ~, the empty part, a. [7]

Then the initial part of the remainder of each string which consists entirely of
digit characters  is determined.  The  numerical values  of these two  parts are
compared, and any difference found is  returned as the result of the comparison.
For these purposes  an empty string (which can  only occur at the end  of one or
both version strings being compared) counts as zero.

These two  steps (comparing and  removing initial non-digit strings  and initial
digit strings)  are repeated  until a  difference is found  or both  strings are
exhausted.



from: Debian Policy Manual (4.5.1.0).   Russ Allbery, Sean Whitton.  2020-11-17.
      --- URL:    https://www.debian.org/doc/debian-policy/ch-controlfields.html
      (online: 2021-06-15 09:40:20 +0000)
--------------------------------------------------------------------------------

5.6.12.1. Epochs should be used sparingly

Note that the  purpose of epochs is  to cope with situations  where the upstream
version  numbering scheme  changes  and  to allow  us  to  leave behind  serious
mistakes.  If  you think that  increasing the epoch  is the right  solution, you
should  consult  debian-devel  and  get  consensus  before  doing  so  (even  in
experimental).

Epochs should not be used when a package needs to be rolled back.  In that case,
use the +really convention: for example, if  you uploaded 2.3-3 and now you need
to  go backwards  to upstream  2.2, call  your reverting  upload something  like
2.3+really2.2-1.  Eventually, when we upload  upstream 2.4, the +really part can
go away.

Epochs are also not intended to  cope with version numbers containing strings of
letters which the  package management system cannot interpret (such  as ALPHA or
pre-), or with silly orderings. [8]



from: BUILDING  A  .DEB  PACKAGE.   SATISH B.  SETTY.   2018-03-18.   ---   URL:
      https://satish.net.in/20180318/ (online: 2021-06-15 09:47:00 +0000)
--------------------------------------------------------------------------------

Choosing  the correct  Debian revision  (-r)  is very  important.  Most  likely,
Debian would release an  official stow-2.2.2 later and we want  to upgrade to it
instead of  keeping our  local install.   Revision number  helps in  this smooth
upgrade  path.   There are  strict  rules  about  versioning,  but I’ll  try  to
summarize.

Most Debian packages are of the  form X.Y.Z-N where everything before the hyphen
is the  upsteam_version and after  hyphen is  the debian_revision.  In  our case
X.Y.Z  =  2.2.2.   The  Debian  revision  number  N  is  usually  single  digit,
incremented by  the package maintainer, starting  from 1.  We want  our revision
number  to lower  than official  Debian’s, so  N =  0 is  good.  We  can compare
whether two versions are less than (lt) or greater than (gt), thus:

    dpkg --compare-versions 2.2.2-0 lt 2.2.2-1 && echo true
    true

If the revision number is  omitted (usually for Debian’s infrastructure packages
like build-essential  or debianutils),  it’s taken  as zero.   X.Y.Z is  same as
X.Y.Z-0.  This collides with our choice of N = 0 above.  Oops! We want something
which sorts  “less than zero”.  And  that is tilda (~).   Think of ~ as  a minus
sign, like a negative number.

    dpkg --compare-versions 2.2.2-0~ lt 2.2.2 && echo true
    true

If there’s a minus sign, there’s gotta be a plus sign (+):

    dpkg --compare-versions 2.2.2 lt 2.2.2-0+ && echo true
    true

In short, 2.2.2-0~ < 2.2.2-0 (=2.2.2) < 2.2.2-0+.

If we ourselves are building stow-2.2.2 many times, let’s call our successive
packages as local1, local2, etc.

In short, since we want our package to have as low version number as possible, a
good choice would be:

--revision 0~local1

Usually “~yourname” is used for a backport and “+yourname” for a recompile.

“recompile” (e.g. binary  NMU), means a package was  recompiled without changing
the source.  This  often occurs when one  of the libraries a  package depends on
has  changed, and  it needs  to be  recompiled against  the newer  library.  The
debian_revision normally will be +b1 (+b2 etc).

“backport” means a “recompile” but from  higher Debian release to a lower Debian
release (e.g. sid -> testing or testing -> stable).



Conclusion:

<package-name>_<epoch>:<upstream-version>-<debian-version>.orig.tar.gz
ecl           _0      :21.2.1            -0.1619418966    .orig.tar.gz



10 create soure code archive

bash> cd /home/vagrant/build_ecl_amd64_deb/

bash> cp -a ./ecl_gitlab.com_embeddable-common-lisp_1619418966 ./ecl-21.2.1/

bash> tar -cJf ./ecl-21.2.1.tar.xz ./ecl-21.2.1

bash> cp ./ecl-21.2.1.tar.xz /home/vagrant/source/



11 prepare source code for packaging

bash> cd /home/vagrant/build_ecl_amd64_deb/

bash> cd ./ecl-21.2.1/

bash> git gc

bash> git switch -c rast/21.2.1-0.1619418966

bash> git config --global user.name 'Ralf Stephan'

bash> git config --global user.email 'me@ralf-stephan.name'

bash> git config --global merge.ff only

bash> git config --global pull.ff only

bash> git config --global core.editor emacs

bash> export DEBFULLNAME='Ralf Stephan'

bash> export DEBEMAIL='me@ralf-stephan.name'

bash> export EMAIL='me@ralf-stephan.name'

bash> ./configure

bash> make

bash> make clean

    Make a “3.0 (quilt)” format no--extran-native Debian GNU/Linux package.

    Use debmake to build Debian GNU/Linux package from the upstream source.

    Some usful arguments are:

        --dist
        --judge
        --binaryspec 'ecl:bin'
        --archive '../ecl-21.2.1-0.1619418966.tar.xz'
        --package 'ecl'
        --upstreamversion '21.2.1'
        --revision '0.1619418966'
        --fullname 'Ralf Stephan' # $DEBFULLNAME
        --email 'me@ralf-stephan.name' # $DEBEMAIL
        --license './COPYING'
        --extra '4'
        --tutorial
	--tar
        --targz 'x'
        --invoke 'debuild'

# Run to init the build.

bash> debmake \
          --judge \
          --package 'ecl' \
          --upstreamversion '21.2.1' \
          --revision '0.1619418966' \
          --extra '4' \
          --tutorial \
          --targz 'x'

    check '/home/vagrant/build_ecl_amd64_deb/ecl.build-dep.log' for required
    packages

        dh-autoreconf
        dh-strip-nondeterminism
        emacs-bin-common
        exuberant-ctags
        gawk
        install-info
        javahelper
        libatomic-ops-dev
        libfakeroot:amd64
        libffi-dev:amd64
        libgc-dev:amd64
        libgmp-dev:amd64
        liblocale-gettext-perl
        libmagic-mgc
        libperl5.30:amd64
        libtext-unidecode-perl
        mime-support
        perl-modules-5.30
        texinfo
        tzdata

    check '/home/vagrant/build_ecl_amd64_deb/ecl.depcheck.log' for required
    packages

        liblocale-gettext-perl
        libmagic-mgc
        libperl5.30:amd64
        libffi-dev:amd64
        libgc-dev:amd64
        exuberant-ctags
        libtext-unidecode-perl
        emacs-bin-common
        texinfo
        tzdata
        libgmp-dev:amd64
        mime-support
        libatomic-ops-dev
        perl-modules-5.30
        libfakeroot:amd64
        gawk
        install-info
        javahelper
        dh-autoreconf
        dh-strip-nondeterminism

bash> git add ./debian/

bash> git commit

    Build Debian package from the upstream source.

    * debian/*: new directories and files



from: BUILDING  A  .DEB  PACKAGE.   SATISH  B. SETTY.   2018-03-18.   ---   URL:
      https://satish.net.in/20180318/ (online: 2021-06-15 09:47:00 +0000)
--------------------------------------------------------------------------------

Packages can  relate to  each other  in various ways.  Apart from  depends other
relationship  fields   are  Recommends:,  Suggests:,   Pre-depends:  Conflicts:,
Provides:, and Replaces: . This is what they mean:

+-----------+------------------------------------------------------------------+
|Depends    |dpkg and dselect will not install your program unless the packages|
|           |it depends on are installed.   Use this if your program absolutely|
|           |will not run unless a particular package is present.              |
+-----------+------------------------------------------------------------------+
|Recommends |dselect  will not  install  your package  unless  the packages  it|
|           |recommends are  installed.  dpkg will  let you do it  though.  Use|
|           |this  for  packages  that  are not  strictly  neccessary  but  are|
|           |typically used with your program.                                 |
+-----------+------------------------------------------------------------------+
|Suggests   |When  a user  installs your  program dselect  will prompt  them to|
|           |install any package it suggests.  dpkg doesn't care.  Use this for|
|           |packages  which will  work nicely  with your  program but  are not|
|           |neccessary.                                                       |
+-----------+------------------------------------------------------------------+
|Pre-depends|This is stronger than depends.   dpkg and dselect will not install|
|           |your program unless  the packages it Pre-depends  on are installed|
|           |and correctly configured.   Use this vry sparingly  and only after|
|           |discussing it on the debian-devel mailing list.                   |
+-----------+------------------------------------------------------------------+
|Conflicts  |dpkg  and dselect  will not  install  your program  until all  the|
|           |packages it conflicts with have been removed.                     |
+-----------+------------------------------------------------------------------+
|Provides   |For some types  of packages where there  are multiple alternatives|
|           |virtual names  have been defined.   You can  get the full  list in|
|           |/usr/doc/debian-policy/virtual-package-names-list.text.gz.     Use|
|           |this if your program provides a virtual package.                  |
+-----------+------------------------------------------------------------------+
|Replaces   |Use this  when your  program replaces  another package.   dpkg and|
|           |dselect will remove replaced packages before installing yours.    |
+-----------+------------------------------------------------------------------+

These  fields all  have a  uniform syntax.   They are  a list  of package  names
separated  by commas.   These package  names may  also be  lists of  alternative
package names, separated  by vertical bar symbols | (pipe  symbols).  The fields
may restrict their  applicability to particular versions of  each named package.
This is done in parentheses after  each individual package name; the parentheses
should contain a relation from the list below followed by a version number.  The
relations allowed  are <<,  <=, =, >=  and >> for  strictly earlier,  earlier or
equal, exactly equal, later or equal and strictly later, respectively.  The last
feature  I want  to show  you is  $(shlibs:Depends) This  will be  automatically
filled in by debmake with the names of any shared libraries (DLLs) such as libc6
this program uses so  you don't have to specify them  yourself.  Having said all
that, we can leave  line 9 exactly as it is as Empire  won't depend on any other
package.

+-----------+------------------------------------------------------------------+
|descripton |Most peoples screens are 80 columns wide so this shouldn't be     |
|           |longer that about 50 characters.                                  |
+-----------+------------------------------------------------------------------+
|long       |This should be a paragraph which gives more detail about the      |
|description|package.  Column 1 of each line should be empty. There should be  |
|           |no blank lines.  Put a . in column 2 to simulate this.            |
+-----------+------------------------------------------------------------------+



bash> emacs ./debian/control

    Priorities are sorted as required > important > standard > optional > extra.

    For section 'Build-Depends:' see
    '/home/vagrant/build_ecl_amd64_deb/ecl.build-dep.log'

    file content:

        Source: ecl
        Section: lisp
        Priority: optional
        Maintainer: Ralf Stephan <me@ralf-stephan.name>
        Build-Depends:
         dh-autoreconf,
         dh-strip-nondeterminism,
         emacs-bin-common,
         exuberant-ctags,
         gawk,
         install-info,
         javahelper,
         libatomic-ops-dev,
         libfakeroot,
         libffi-dev,
         libgc-dev,
         libgmp-dev,
         liblocale-gettext-perl,
         libmagic-mgc,
         libperl5.30,
         libtext-unidecode-perl,
         mime-support,
         perl-modules-5.30,
         texinfo,
         tzdata
        Standards-Version: 4.4.1
        Homepage: https://common-lisp.net/project/ecl/
        Vcs-Browser: https://gitlab.com/embeddable-common-lisp/ecl/
        Vcs-Git: https://gitlab.com/embeddable-common-lisp/ecl/.git

        Package: ecl
        Architecture: any
        Depends:
         ${shlibs:Depends},
         ${misc:Depends},
         libffi-dev,
         libgmp-dev,
         libncurses5-dev,
         libgc-dev,
         libatomic-ops-dev,
         gcc
        Description: Embeddable Common-Lisp: has an interpreter and can compile to C
         ECL stands for Embeddable Common-Lisp. The ECL project is an
         effort to modernize Giuseppe Attardi's ECL environment to
         produce an implementation of the Common-Lisp language
         which complies to the ANSI X3J13 definition of the language.
         .
         The current ECL implementation features:
          * A bytecodes compiler and interpreter.
          * A translator to C.
          * A UFFI-compatible interface to C code.
          * A dynamic loader.
          * The possibility to build standalone executables and DLLs.
          * The Common-Lisp Object System (CLOS).
          * Conditions and restarts for handling errors.
          * Sockets as ordinary streams.
          * The GNU Multiprecision library for fast bignum operations.
          * A simple conservative mark & sweep garbage collector.
          * The Boehm-Weiser garbage collector.

    commit log message:

        Edit control file.

        * debian/control: edit

bash> emacs ./debian/changelog

    Use 'UNRELEASED'.

    You can manipulate changelog entries with 'dch -i' (debchange).

    file content:

        ecl (21.2.1-0.1619418966) UNRELEASED; urgency=low

          * Initial release.

         -- Ralf Stephan <me@ralf-stephan.name>  Thu, 29 Apr 2021 13:09:00 +0000

    commit log message:

        Edit changelog file.

        * debian/changelog: edit item for 'ecl (21.2.1-0.1619418966)'

bash> git add ./debian/changelog

# Configure for test build.
#
#./configure
#
# Configure for build like the GNU/Linux Debian package.
#
#./configure \
#--enable-gmp=system \
#--enable-threads=yes \
#--enable-boehm=system \
#--enable-libatomic=system \
#--disable-rpath \
#--with-tcp \
#--with-x
#
# Configre for build with asdf and defsystem.
#
./configure \
--enable-gmp=system \
--enable-threads=yes \
--enable-boehm=system \
--enable-libatomic=system \
--disable-rpath \
--with-asdf \
--with-defsystem \
--with-tcp \
--with-x

bash> DEB_BUILD_OPTIONS=nocheck dpkg-buildpackage --unsigned-source --unsigned-changes --invoke 'debuild'

bash> lintian -EviI ../ecl_21.2.1-0.1619418966_amd64.deb



Info about the package:

    dpkg -I ./ecl_21.2.1-0.1619418966_amd64.deb

List the contents of the deb:

    dpkg -c ./ecl_21.2.1-0.1619418966_amd64.deb

Install it:

    sudo dpkg -i ecl_21.2.1-0.1619418966_amd64.deb
